メモ

・商品一覧ページはアプリとシステムで同一のものを使用すればよいか？

・つまり、フロント → springboot → cloudflare R2 で画像をアップロード
　それと同時にspringboot → データベース で画像のURL(ファイル名？)を保存
　データベース → springboot → フロント で画像URLを渡し、
　フロント側で <img src=画像URL> とすれば、表示できるはず。

　springbootからR2にアクセスするコードは以下参照
　https://developers.cloudflare.com/r2/examples/aws/aws-sdk-java/

　flywayを導入してproductsテーブルを作成するSQLファイルを実装するところから
　以下参照してputBacket()なりでR2にアップロードできるかやってみる

　putObject(PutObjectRequest, RequestBody) を使用する？

　サイトの方はAmazons3クラスのputObject()を使用しているが、
　自分のコードではS3Clientクラスを使用しているため、
　公式やQiitaの実装例サイトは参考にできない。
　PutObjectRequest()ではbuilderを利用して、バケット名やファイルタイプなどを
　指定すればよいのだろうか？
　最終的に、バケット名、キー名、コンテンツタイプを指定すると
　無事アップロードできるようになった。

　MultipartFile.getBytes() → RequestBody.fromBytes() の流れを使えば
　ファイル内容からRequestBodyは作れるか？
　MultipartFile.transferTo(File) を使ってもよさそう。
　やっぱtransferTo()は無理そう。Fileのコンストラクタで必ず
　存在するファイルを指定しなきゃいけないっぽいから。
　RequestBody.fromBytes(file.getBytes()) で無事アップロードできた。

https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/S3Client.html

テーブル
    商品(id, name, genre, price, total_purchased, release_date, delivery_time, image_url)
    ユーザ(id, name, password, balance)
    注文(ユーザID, 商品ID, order_date) 多対多

======================================================================

マークダウンのテーブル便利な拡張機能
https://qiita.com/tawara_/items/5d59cf725e7c7aa72f0f

springbootでは multipart/form-data で送信されたそれぞれの情報を
@RequestPart("名前")で取得することができる。
https://b1san-blog.com/post/spring/spring-file/

aws-java-sdkをそのまま依存関係に追加すると、
ライブラリ全体をインクルードするため、かなりの量の不要なファイルも
取り込むことになってしまう。
aws-java-sdkは1.9.0以降、機能ごとにライブラリを取り込みできるため
そのようにした方が良い。
https://qiita.com/s-katsumata/items/34a326f1d802add10119

@ConfigurationPropertyがつけられたクラスをSpringDIに認識させる3つの方法
@EnableConfigurationPropertiesは記述が簡単だが、
@Beanで管理すると、@Beanメソッドを定義する際にprefixを上書きすることができ、
「同じ構造の異なるprefixを持つプロパティ」を1つのクラスで読み込むことができる。
https://qiita.com/cfg17771855/items/905da3100ae99c5197f0

MySQL8.0以降でユーザに権限を与える場合、ユーザ作成と権限付与は
別々に行わなければならないらしい？
https://www.grimoire.tokyo/2022/04/14/post-252/
https://qiita.com/Atsulabo/items/7512cdc267d89307995d

新たにMYSQL_DATABASEを指定したが、データベースが作られない。
　→ MySQLのdocker公式イメージは、ボリュームが空の状態の時だけ
　　初期化スクリプトを実行し、MYSQL_DATABASE,MYSQL_USERなどを作成する。
　　そのため、ボリュームを削除して再度upしなければならない。

docker compose down は up コマンドと真逆のことをする。
つまり、up で作られうるもの(イメージ、コンテナ、ボリューム、ネットワーク)を
すべて削除する。
https://qiita.com/suin/items/19d65e191b96a0079417

javaで画像ファイルどうかはjavax.imageio.ImageIO#reqd(File)
メソッドで判定することができる。
https://blog.ricemountainer.net/posts/2017/453836237/