メモ

　ProductControllerに渡されたFormクラスをそのままServiceに渡し、
　Serviceがエンティティへの変換、R2へのアップロード、
　URLの加工、データベースへの保存を行うようにし、
　実際にデータベースに登録できるか確かめるところから
　つまり、コントローラーがフィールドで保持しているR2のやつは
　サービスが持つようにする。

　ProductCreateFormからProductCreateDtoへの変換は
　コントローラーで行うべきか、サービスで行うべきか？
　FormのファイルをURLに変換する必要がある。
　あと、カテゴリ名からそのカテゴリデータのidを取得して
　dtoクラスにはcategoryIdの形で保持させる必要がある？あと企業IDも。
　とりあえずサービスクラスで全部やることにする。
　コントローラーにビジネスロジックを持たせるのはなんか違う。
　そしてForm,Dto,Entityクラスの変換にはMapStructを使用したい。

　商品登録時に在庫数のフィールドも必要では？
　というか商品テーブルに在庫数のカラム必要では？
　累計購入数は商品テーブルになくても良い気がする。
　別テーブルに企業ID,商品ID,累計購入数 の形で切り出したい。

　企業idは現在ログインしている管理者のidを引っ張れればいい。
　ということは、商品登録よりも先に企業登録の処理を考えなければならない？
　認証はJWTトークンを用いる形で行い、トークン内に企業ID情報を格納する。

　商品管理システムのトップページは認証は必要とせず、
　トップページ内の商品管理、商品カテゴリ管理、企業情報変更などの
　ボタンが押されてspringbootのapiに通信されたときに
　springbootがトークンの有無を確認するように実装する。

　JWTトークンを用いた認証処理を実装するところから

　フロントのフォームactionにはフロントで遷移したいページを指定するのでは？
　ページの遷移は全てapiを通す必要があるので、
　buttonを使用してjavascriptで制御するようにする。
　javascriptでまず最初にspringbootのトークン確認用のマッピングに
　リクエストを送信し、持っていればページ遷移ができるし、
　持っていなければログインページに遷移させるようにする。

https://ik.am/entries/818
https://spring.pleiades.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html
https://tech-lab.sios.jp/archives/8651

　「クレームセットマッピングの構成」を参考にして
　企業IDをトークン内に含めることができるかもしれない。
　NimbusJwtのissuerUriにはどのURIを指定すればいいのか？
　それはどうやったら調べられるのか？

　OIDCとspringboot認証を併用する場合、
　どっちを使用しているのか判別する方法は？
　emailアドレスが一意であることを

　とりあえずSpringBootにJWTを実装する。
　アルゴリズムはECDSA,ED25519のどちらかを使用するのがよさそう。
　nimbusにED25519はあるか？ありそう。
　なんかnimbuse.joseでed25519を使用して参考サイトと同じような
　クラス作るやり方がわからない。
　とりあえずSpringSecurityでED25519を使うのはかなり面倒そうなので、
　ECDSAで実装することにする。

　管理システム用とECサイト用でSecurityFilterを分けたい。
　つまり、UserDetailsServiceを実装した
　CompanyDetailsServiceとEcsiteUserDetailsServiceの2つを実装したい。
　ただ、そんなことできるのか？Bean登録するから
　場合に応じてどっちのUserDetailsServiceを使い分けるみたいなことを
　実現する方法がわからない。

　opensslでed25519の鍵ペアを作成
https://pebble8888.hatenablog.com/entry/2019/04/30/211832
https://bitbucket.org/connect2id/nimbus-jose-jwt/src/master/src/main/java/com/nimbusds/
https://docs.oracle.com/javase/jp/22/docs/api/java.base/java/security/interfaces/package-summary.html

　S3Configもレコードにできるのならしたい。

======================================================================

　商品のジャンルは商品登録の際に選択できるようにしたい。
　ということはcategoriesテーブルを新たに作成し、
　そっちから先にデータを登録して
　商品を登録する際は既にあるcategoriesテーブルのデータを選択するように
　させた方が良いのでは？

　R2はプレフィックスで階層を表現できるため、商品のジャンルごとに
　バケットを分ける必要はなく、階層で表現すればよい。
　そうすれば、データベースからgenreを取得してその文字列をそのまま
　取得したい階層に指定することができる。

======================================================================

マークダウンのテーブル便利な拡張機能
https://qiita.com/tawara_/items/5d59cf725e7c7aa72f0f

springbootでは multipart/form-data で送信されたそれぞれの情報を
@RequestPart("名前")で取得することができる。
https://b1san-blog.com/post/spring/spring-file/

aws-java-sdkをそのまま依存関係に追加すると、
ライブラリ全体をインクルードするため、かなりの量の不要なファイルも
取り込むことになってしまう。
aws-java-sdkは1.9.0以降、機能ごとにライブラリを取り込みできるため
そのようにした方が良い。
https://qiita.com/s-katsumata/items/34a326f1d802add10119

@ConfigurationPropertyがつけられたクラスをSpringDIに認識させる3つの方法
@EnableConfigurationPropertiesは記述が簡単だが、
@Beanで管理すると、@Beanメソッドを定義する際にprefixを上書きすることができ、
「同じ構造の異なるprefixを持つプロパティ」を1つのクラスで読み込むことができる。
https://qiita.com/cfg17771855/items/905da3100ae99c5197f0

MySQL8.0以降でユーザに権限を与える場合、ユーザ作成と権限付与は
別々に行わなければならないらしい？
https://www.grimoire.tokyo/2022/04/14/post-252/
https://qiita.com/Atsulabo/items/7512cdc267d89307995d

新たにMYSQL_DATABASEを指定したが、データベースが作られない。
　→ MySQLのdocker公式イメージは、ボリュームが空の状態の時だけ
　　初期化スクリプトを実行し、MYSQL_DATABASE,MYSQL_USERなどを作成する。
　　そのため、ボリュームを削除して再度upしなければならない。

docker compose down は up コマンドと真逆のことをする。
つまり、up で作られうるもの(イメージ、コンテナ、ボリューム、ネットワーク)を
すべて削除する。
https://qiita.com/suin/items/19d65e191b96a0079417

javaで画像ファイルどうかはjavax.imageio.ImageIO#reqd(File)
メソッドで判定することができる。
https://blog.ricemountainer.net/posts/2017/453836237/

springbootからR2にアクセスするコードは以下参照
https://developers.cloudflare.com/r2/examples/aws/aws-sdk-java/