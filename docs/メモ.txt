メモ

　認可処理を実装するところから
　ROLE_ADMINを与えられたユーザしか商品管理システムは操作できないようにしたい。

　管理システムとECサイトのエンドポイント分けをどのようにすればわかりやすいか？
　admin/**, ecsite/** が一番わかりやすいか？
　例えば、商品では一覧はどちらの権限も取得できるが、
　追加、削除、更新についてはadminしか行えないため、
　ProductController全体のマッピングに/admin とすることはできない。
　それはCustomerControllerについても同様で、
　顧客情報の取得は管理システムでもできるが、
　追加、更新、削除については顧客張本人、つまりcustomerしか行えないため、
　CustomerController全体のマッピングに/customerとすることはできない。
　ではどのようにエンドポイントを定義すればよいのか？
　取得処理は全ロール許可、追加、更新、削除処理は
　そのEntityに対して権限を持つもののみ、というか顧客情報以外は
　adminのみ操作できるようにしたい。

　ECサイトの商品一覧はどうやって表示させればいいのか？
　普通にjavascriptで取得、そこでトークンが無いなら認証画面へ
　遷移する処理を書けばいいか？
　ECサイトのtop.jsでまず/customer/authに通信し、
　トークンがあればそのまま商品一覧を表示して、
　無ければログイン画面に遷移するようなコードを実装する。

　JavaScriptの処理でSpringBootに通信を行うfetch()の大部分は
　共通の処理なので、constant.jsと同じ階層にcommon.jsを作り
　そこに共通処理を切り出して利用する形にしたい。
　signup(),login(),auth()で分ける形にするか？

　トークン認証ができなくなってしまった。
　認可が上手くいってないか？
　　→ 原因は、トークンのscopeを設定するところで先頭にROLE_を
　　　付与していないことだった。SecurityFilterChain内の
　　　hasRole()では自動的に先頭にROLE_がつけられるため、
　　　先頭にROLE_をつけて記述するとエラーが出てしまう。
　　　自動的にROLE_がつくのはhasRole()だけで起こるものなのに、
　　　なぜかコード全体で起こると勘違いしてトークン生成で付与するところでも
　　　先頭のROLE_を削除してしまい、認可の不整合が生じてしまっていた。

　管理システムの方はログイン後にトップ画面に行きたいが、
　ECサイトの方は商品一覧をトップ画面にしたい。
　メソッドの引数に遷移先のファイル名も指定する形にすればよいか？

　ユーザ生成の際に、既にユーザ名がある場合はControllerからエラーを返したい。

======================================================================

　R2はプレフィックスで階層を表現できるため、商品のジャンルごとに
　バケットを分ける必要はなく、階層で表現すればよい。
　そうすれば、データベースからgenreを取得してその文字列をそのまま
　取得したい階層に指定することができる。

　OIDCでJWTトークンを生成する場合、認証が終わった後に
　SpringBootとOIDC間でやり取りすることは可能なのか？
　それができるなら、そこでscopeなどを設定できる？

　Formクラスもレコードでいいのでは？ユーザの入力をサーバ側で
　書き換えられる必要などないはずなので、できそうなら変更する

　CSRF設定を適切に行う

　.oauth2ResourceServer( rs -> rs.jwt( jwt -> {})) 内で、
　jwt.bearerTokenResolver(BearerTokenResolver)で
　リクエストからベアラートークンを解決する方法をカスタマイズできる。
　BearerTokenResolverインタフェースのresolve()メソッドは引数に
　HttpServletRequestを受け取る。Cookieを検証するカスタムフィルターも
　引数にHttpServletRequestを受け取っているため、もしかしたら
　SpringSecurityがデフォルトで用意するJWT認証を上手くカスタマイズできるのでは？
　ただ、Authentication周りがよくわからないので、
　とりあえずCookieの参考サイトの通りに進めてみるのが良いかもしれない。

======================================================================

マークダウンのテーブル便利な拡張機能
https://qiita.com/tawara_/items/5d59cf725e7c7aa72f0f

springbootでは multipart/form-data で送信されたそれぞれの情報を
@RequestPart("名前")で取得することができる。
https://b1san-blog.com/post/spring/spring-file/

aws-java-sdkをそのまま依存関係に追加すると、
ライブラリ全体をインクルードするため、かなりの量の不要なファイルも
取り込むことになってしまう。
aws-java-sdkは1.9.0以降、機能ごとにライブラリを取り込みできるため
そのようにした方が良い。
https://qiita.com/s-katsumata/items/34a326f1d802add10119

@ConfigurationPropertyがつけられたクラスをSpringDIに認識させる3つの方法
@EnableConfigurationPropertiesは記述が簡単だが、
@Beanで管理すると、@Beanメソッドを定義する際にprefixを上書きすることができ、
「同じ構造の異なるprefixを持つプロパティ」を1つのクラスで読み込むことができる。
https://qiita.com/cfg17771855/items/905da3100ae99c5197f0

MySQL8.0以降でユーザに権限を与える場合、ユーザ作成と権限付与は
別々に行わなければならないらしい？
https://www.grimoire.tokyo/2022/04/14/post-252/
https://qiita.com/Atsulabo/items/7512cdc267d89307995d

新たにMYSQL_DATABASEを指定したが、データベースが作られない。
　→ MySQLのdocker公式イメージは、ボリュームが空の状態の時だけ
　　初期化スクリプトを実行し、MYSQL_DATABASE,MYSQL_USERなどを作成する。
　　そのため、ボリュームを削除して再度upしなければならない。

docker compose down は up コマンドと真逆のことをする。
つまり、up で作られうるもの(イメージ、コンテナ、ボリューム、ネットワーク)を
すべて削除する。
https://qiita.com/suin/items/19d65e191b96a0079417

javaで画像ファイルどうかはjavax.imageio.ImageIO#reqd(File)
メソッドで判定することができる。
https://blog.ricemountainer.net/posts/2017/453836237/

springbootからR2にアクセスするコードは以下参照
https://developers.cloudflare.com/r2/examples/aws/aws-sdk-java/

コントローラーのメソッドの引数にUriComponentsBuilderを受け取ることで、
簡単に相対パスのURLを作成することができる。
例えば、コントローラのパスが/controller、メソッドのパスが/abc だった場合、
builder.path("") とすると、http://localhost:8080/controller/abc
といったURLを作成することができる。
https://techorgana.com/java/java_web_flamework/spring/5266/

「JdbcTypeRecommendationException: Could not determine recommended
　JdbcType for Java type 'com.example.ecsite.data.entity.Administrator'」
のエラー解決は、監査ユーザに設定するAdministratorエンティティクラスが
Serializableを実装する必要があったことによるエラー。Serializableを実装して解決。
https://stackoverflow.com/questions/73312803/could-not-determine-recommended-jdbctype-for-class

Javaの標準APIではPKCS#1の鍵フォーマットは直接扱えないため、
以下のようなコマンドで、標準APIで扱えるPKCS#8に変換する必要がある。
openssl pkcs8 -in jwt.key.p1 -out jwt.key -topk8 -nocrypt
https://developer.mamezou-tech.com/blogs/2022/12/25/rsa-java-jwt/

KeyFactoryを使用しないと鍵からECPrivateKey,ECPublicKeyへの変換はできない。
https://qiita.com/rawr/items/e356f765122637df3dea